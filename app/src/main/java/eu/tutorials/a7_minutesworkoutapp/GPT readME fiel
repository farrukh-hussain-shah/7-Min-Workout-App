Lectures Overview
Lecture 1 & 2
In these lectures, we cover the following topics:

Creating a Start Button and setting an OnClickListener.
Lecture 3
In this lecture, we focus on changing the ActionBar by modifying the themes.xml file. We explore the theme "Theme.7MinutesWorkoutApp" and set its parent as "Theme.MaterialComponents.DayNight.NoActionBar". Additionally, we learn about view binding and import the necessary settings in the Gradle file.

Lecture 4
In this lecture, we learn how to create an action bar and implement a back button to navigate to the previous activity when required.

Lecture 5
In this lecture, our focus is on designing the UI for a counter. We create a circular_progress_bar that rotates when started. Additionally, we create circular_progress_gray, which represents the progress bar turning gray when the time ends. We also introduce item_circular_color_accent_background.xml for a small circular component.

Lecture 6
This lecture serves as a demonstration of the timer functionality.

Lecture 7
In this lecture, we introduce the setRestProgressBar() function. This function initializes and starts a countdown timer, which updates the progress bar and text view on each tick of the timer. Furthermore, a toast message is displayed when the timer finishes.

Lecture 8
In this lecture, we modify the previous frame layout by setting the tools:visible and android:invisible attributes. We also change the names of each component. Similar to the previous lecture, when the previous timer finishes, we call the setupExerciseView() function. This function has similar properties to setupRestView(), but in this case, the RestProgress is set to invisible, and the Exercise component is set to visible.


package eu.tutorials.a7_minutesworkoutapp

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.CountDownTimer
import android.speech.tts.TextToSpeech.QUEUE_FLUSH
import android.view.View
import android.widget.Toast
import eu.tutorials.a7_minutesworkoutapp.databinding.ActivityExerciseBinding

class ExerciseActivity : AppCompatActivity(),TextToSpeach.OnInitListener {

    private var binding:ActivityExerciseBinding?=null

    private var restTimer:CountDownTimer?=null
    private var restProgress= 0

    private var ExerciseTimer:CountDownTimer?=null
    private var ExerciseProgress= 0

    private var exerciseList:ArrayList<ExerciseModel>?=null
    private var currentExercisePosition=-1

    private var tts:TextToSpeach?=null



    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding=ActivityExerciseBinding.inflate(layoutInflater)
        setContentView(binding?.root)

        setSupportActionBar(binding?.toolbarExercise)


        if (supportActionBar != null){
            supportActionBar?.setDisplayHomeAsUpEnabled(true)
        }

        exerciseList=Constants.defaultExerciseList()

        tts=TextToSpeach(this,this)

        binding?.toolbarExercise?.setNavigationOnClickListener{
            onBackPressed()
        }

        setupRestView()

    }
    private fun setupRestView(){

        binding?.flRestView?.visibility=View.VISIBLE
        binding?.tvTitle?.visibility=View.VISIBLE
        binding?.tvExerciseName?.visibility=View.INVISIBLE
        binding?.flExerciseView?.visibility=View.INVISIBLE
        binding?.ivImage?.visibility=View.INVISIBLE

        binding?.tvUpComingLabel?.visibility=View.VISIBLE
        binding?.tvUpComingExercise?.visibility=View.VISIBLE

        binding?.flExerciseView?.visibility=View.INVISIBLE
        binding?.ivImage?.visibility=View.INVISIBLE

        if (restTimer != null){
            restTimer?.cancel()
            restProgress=0
        }

        binding?.tvUpComingExercise?.text=exerciseList!![currentExercisePosition +1].getName()

        setRestProgressBar()
    }
    private fun setupExerciseView(){
        binding?.flRestView?.visibility=View.INVISIBLE
       binding?.tvTitle?.visibility=View.INVISIBLE
        binding?.tvExerciseName?.visibility=View.VISIBLE
        binding?.flExerciseView?.visibility=View.VISIBLE
        binding?.ivImage?.visibility=View.VISIBLE

        binding?.tvUpComingLabel?.visibility=View.INVISIBLE
        binding?.tvUpComingExercise?.visibility=View.INVISIBLE

        if (ExerciseTimer != null){
            ExerciseTimer?.cancel()
            ExerciseProgress=0
        }



        binding?.ivImage?.setImageResource(exerciseList!![currentExercisePosition].getImage())
        binding?.tvExerciseName?.text=exerciseList!![currentExercisePosition].getName()


     setExerciseBar()
    }

    private fun setRestProgressBar() {
        binding?.progressBar?.progress = restProgress // Set initial progress of the progress bar

        restTimer = object : CountDownTimer(3000, 1000) {
            override fun onTick(p0: Long) {
                restProgress++
                binding?.progressBar?.progress = 10 - restProgress
                binding?.tvTimer?.text = (10 - restProgress).toString()
            }

            override fun onFinish() {
                currentExercisePosition++
                setupExerciseView() // Call the setupExerciseView() method to switch to the exercise view
            }
        }.start()
    }



    private fun setExerciseBar() {
        binding?.ExerciseBar?.progress = ExerciseProgress // Set initial progress of the progress bar

        ExerciseTimer = object : CountDownTimer(3000, 1000) { // Create a CountDownTimer with a duration of 10000 ms (10 seconds) and an interval of 1000 ms (1 second)
            override fun onTick(p0: Long) {
                ExerciseProgress++ // Increment restProgress after updating the progress bar and text view
                binding?.ExerciseBar?.progress = 30 - ExerciseProgress // Update the progress bar by subtracting restProgress from 10
                binding?.tvExerciseTimer?.text = (30 - ExerciseProgress).toString() // Update the text view with the remaining time

            }

            override fun onFinish() {
               if (currentExercisePosition<exerciseList?.size!!-1){
                   setupRestView()
               } else{
                   Toast.makeText(this@ExerciseActivity,"Congratulations! You have completed the 7 minutes workout",Toast.LENGTH_LONG).show()
               }// Display a toast message when the countdown timer finishes
            }
        }.start() // Start the countdown timer
    }


    override fun onDestroy() {
        super.onDestroy()
        if (restTimer != null){
            restTimer?.cancel()
            restProgress=0
        }
        if (ExerciseTimer != null){
            ExerciseTimer?.cancel()
            ExerciseProgress=0
        }

        binding=null
    }

    override fun onInit(p0:Int){

    }
    private fun speakOut(text:String){
        tts!!.speak(text,TextToSpeach.QUEUE_FLUSH,null,"")
    }
}












